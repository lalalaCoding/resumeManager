<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.my.resumeManager.resumeHistory.model.dao.ResumeHistoryMapper">
 	<select id="selectAllPlatformType" resultType="PlatformType">
 		select * from platform_type <!-- 데이터의 갯수가 적기 때문에 인덱스 사용하지 않음 -->
 	</select>
 	
 	<select id="selectAllConditionInfo" resultType="ConditionInfo">
 		select * from condition_info <!-- 데이터의 갯수가 적기 때문에 인덱스 사용하지 않음 -->
 	</select>
 	
 	<select id="selectAllCompanyType" resultType="CompanyType">
 		select * from company_type <!-- 데이터의 갯수가 적기 때문에 인덱스를 사용하지 않음 -->
 	</select>
 	
 	
 	<insert id="insertResumeHistory" useGeneratedKeys="true">
 		<selectKey resultType="_int" keyProperty="resumeNo" order="BEFORE">
 			select seq_history.nextval from dual
 		</selectKey>
 		insert into RESUME_HISTORY
 		values(${resumeNo}, #{resumeWriter}, #{resumeDate}, #{companyName},
				#{companySalary}, #{companyRegion}, #{resumeState}, #{resumeCareer}, #{resumeDeadline},
				#{companyType.typeNo}, #{platformType.platformNo}, DEFAULT)
 	</insert>
 	
 	<!-- 지원 조건 삽입 : 동적 SQL -->
 	<insert id="insertResumeCondition">
 		insert all
 		<foreach collection="list" item="item" separator=" ">
 			into resume_condition values(fn_condition, #{item.resumeNo}, #{item.conditionType}, #{item.infoNo})
 		</foreach>
 		select * from dual
 	</insert>
 	
 	<!-- 지원 이력 삭제 -->
 	<delete id="deleteResumeHistory">
 		delete from resume_history where resume_no = ${resumeNo}
 	</delete>
 	
 	<!-- 지원 이력 개수 조회 -->
 	<select id="getCountResumeHistory" resultType="_int">
 		select count(*) 
 		from resume_history 
 		where RESUME_VAILD = 'Y' AND RESUME_WRITER = ${memberNo}
 	</select>
 	
 	<!-- 페이지 처리된 지원 이력 조회 -->
 	<resultMap type="com.my.resumeManager.resumeHistory.model.vo.ResumeHistory" id="resumeHistoryMap">
 		<id property="resumeNo" column="RESUME_NO"></id>
 		<result property="companyName" column="COMPANY_NAME"></result>
 		<result property="companyRegion" column="COMPANY_REGION"></result>
 		<result property="companySalary" column="COMPANY_SALARY"></result>
 		<result property="resumeCareer" column="RESUME_CAREER"></result>
 		<result property="resumeDate" column="RESUME_DATE"></result>
 		<result property="resumeDeadline" column="RESUME_DEADLINE"></result>
 		<result property="resumeState" column="RESUME_STATE"></result>
 		<result property="resumeVaild" column="RESUME_VAILD"></result>
 		<result property="resumeWriter" column="RESUME_WRITER"></result>
 		<association property="companyType" javaType="com.my.resumeManager.resumeHistory.model.vo.CompanyType">
 			<result property="typeNo" column="TYPE_NO"></result>
 			<result property="typeName" column="TYPE_NAME"></result>
 		</association>
 		<association property="platformType" javaType="com.my.resumeManager.resumeHistory.model.vo.PlatformType">
 			<result property="platformNo" column="PLATFORM_NO"></result>
 			<result property="platformName" column="PLATFORM_NAME"></result>
 		</association>
 	</resultMap>
 	
 	<select id="selectAllResumeHistory" resultMap="resumeHistoryMap">
 		select /*+ INDEX_DESC(RESUME_HISTORY IDX_HISTORY_VAILD_WRITER)*/* 
 		from resume_history
 				join company_type on(company_type_no = type_no)
 				join platform_type using(platform_No)
 		where RESUME_VAILD = 'Y' AND RESUME_WRITER = ${memberNo} 
 		order by resume_date desc
 	</select>
 	
 	<!-- 지원 이력에 대한 지원 조건 조회 -->
 	<select id="selectAllResumeCondition" resultType="ResumeCondition">
 		select *
 		from resume_condition
 				join condition_info using(info_no)
		where resume_no in 
		<foreach collection="list" item="item" open="(" close=")" separator=", ">
			${item.resumeNo}		
		</foreach>
 	</select>
 	
 	<!-- 지원 이력 검색 : listCount 조회 -->
 	<select id="getSearchCountResumeHistory" resultType="_int">
 		SELECT 
 				<if test="infoName == null">
 					COUNT(*)
				</if>
				<if test="infoName != null">
 					COUNT(DISTINCT(RESUME_NO))
				</if>
		FROM RESUME_HISTORY
				<if test="infoName != null">
					JOIN TABLE(FN_CONDITION_SEARCH(#{infoName})) USING(RESUME_NO)
				</if>
		        JOIN COMPANY_TYPE ON(TYPE_NO = COMPANY_TYPE_NO)
		        JOIN PLATFORM_TYPE USING(PLATFORM_NO)
		WHERE RESUME_VAILD = 'Y' AND RESUME_WRITER = ${memberNo}
				<if test="companyName != null">
					AND CONTAINS(COMPANY_NAME, '%' || #{companyName} ||'%') <![CDATA[>]]> 0
				</if>
				<if test="beginDt != null and endDt != null">
					AND RESUME_DATE BETWEEN TO_DATE(#{beginDt}, 'YYYY-MM-DD') AND TO_DATE(#{endDt}, 'YYYY-MM-DD')
				</if>
		ORDER BY RESUME_DATE DESC
 	</select>
 	
 	<select id="selectResumeHistory" resultMap="resumeHistoryMap">
 		SELECT *
 				<!-- <if test="infoName == null">
 					*
				</if> -->
				<!-- <if test="infoName != null">
 					DISTINCT(RESUME_NO), COMPANY_NAME,COMPANY_REGION, COMPANY_SALARY, RESUME_CAREER,
 					RESUME_DATE, RESUME_DEADLINE, RESUME_STATE, RESUME_VAILD, RESUME_WRITER,
					TYPE_NO, TYPE_NAME, PLATFORM_NO, PLATFORM_NAME
				</if> -->
				<!-- 테스트 -->
		FROM RESUME_HISTORY
				<if test="infoName != null">
					JOIN TABLE(FN_CONDITION_SEARCH(#{infoName})) USING(RESUME_NO)
				</if>
		        JOIN COMPANY_TYPE ON(TYPE_NO = COMPANY_TYPE_NO)
		        JOIN PLATFORM_TYPE USING(PLATFORM_NO)
		WHERE RESUME_VAILD = 'Y' AND RESUME_WRITER = ${memberNo}
				<if test="companyName != null">
					AND CONTAINS(COMPANY_NAME, '%' || #{companyName} ||'%') <![CDATA[>]]> 0
				</if>
				<if test="beginDt != null and endDt != null">
					AND RESUME_DATE BETWEEN TO_DATE(#{beginDt}, 'YYYY-MM-DD') AND TO_DATE(#{endDt}, 'YYYY-MM-DD')
				</if>
		ORDER BY RESUME_DATE DESC
 	</select>
 	
 	<select id="selectOneResumeHistory" resultMap="resumeHistoryMap">
 		SELECT *
 		FROM RESUME_HISTORY
 				JOIN COMPANY_TYPE ON(TYPE_NO = COMPANY_TYPE_NO)
		        JOIN PLATFORM_TYPE USING(PLATFORM_NO) 
 		WHERE RESUME_NO = ${resumeNo} AND RESUME_VAILD = 'Y'
 	</select>
 	
 	
 	<select id="selectOneResumeCondition" resultType="ResumeCondition">
 		select *
 		from resume_condition
 				join condition_info using(info_no)
		where resume_no = ${resumeNo}
 	</select>
 	
 	<!-- 지원 이력 수정하기 -->
 	<update id="updateResumeHistory" parameterType="java.util.Map">
 		update resume_history
 		<set>
 			<foreach collection="updMap" index="key" item="value" separator=" ">
 				<if test="!key.equals('RESUME_DATE') and !key.equals('RESUME_DEADLINE')">
	 				${key} = #{value},
 				</if>
 				<if test="key.equals('RESUME_DATE') or key.equals('RESUME_DEADLINE')">
 					${key} = to_date(#{value}),
 				</if>
 			</foreach>
 		</set>
 		where resume_no = ${updMap.resumeNo} and resume_writer = ${updMap.resumeWriter}
 	</update>
 	
 	
 	
 	
 	
 	
 </mapper>